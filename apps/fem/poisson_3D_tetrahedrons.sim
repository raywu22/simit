%
%  Strong form (poisson problem)
%
% - \nabla^2 u = f(x,y) in \Omega (domain)
%            u = 0      on \Gamma (boundary)
%
%  solved using linear functions on a tetrahedral mesh
%

element Node
    x    : vector[3](float); % position
    edge : bool;             % true if part of the boundary
    u    : float;            % solution
    i    : int;              % index of node
end

element Tetrahedral
end

extern verts : set{Node};
extern tets  : set{Tetrahedral}(verts, verts, verts, verts);

% source term / body forces (right-hand-side function of equation)
func f(x : vector[3](float)) -> z : float
    z = 5.0;
end

func assemble(t : Tetrahedral, v : (Node*4)) -> (A : matrix[verts,verts](float),
                                                 b : vector[verts](float))
    var X : matrix[4,4](float) = 0.0;
    for i in 0:4
        for j in 0:3
            X(i,j) = v(i).x(j);
        end
        X(i,3) = 1.0;
    end
    abc  = inv4(X);
    detX = det4(X);
    var mid    : vector[3](float)   = (v(0).x + v(1).x + v(2).x + v(3).x)/4.0; % triangle center
    var volume = detX;
    if volume < 0.0
        volume = -volume;
    end

    for i in 0:4
        for j in 0:4
            % skip edge functions
            if not( v(i).edge or v(j).edge )
                A(v(i), v(j)) = (abc(0,i)*abc(0,j) +
                                 abc(1,i)*abc(1,j) +
                                 abc(2,i)*abc(2,j) ) * volume;
            end
        end
        
        if not v(i).edge
            b(v(i)) = 1.0/4.0 * f(mid) * volume; % one-point gauss intergation
        else
            A(v(i), v(i)) = 1.0;
        end
    end
end

export func main()
    % assemble system matrix and right-hand side
    A, b = map assemble to tets reduce +;

    % solve linear system of equations, store result in the Node set
    verts.u = A \ b;
end

